[build-system]
requires = ["setuptools>=77.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "sphinxcontrib-jsontable"
version = "0.3.0"
description = "Sphinx extension to render JSON data as tables"
readme = "README.md"
license = "MIT"
license-files = ["LICENSE"]
dynamic = []
authors = [{ name = "sasakama-code", email = "sasakamacode@gmail.com" }]
maintainers = [{ name = "sasakama-code", email = "sasakamacode@gmail.com" }]
keywords = ["sphinx", "json", "table", "documentation", "rst", "markdown"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Environment :: Web Environment",
    "Framework :: Sphinx :: Extension",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Documentation",
    "Topic :: Documentation :: Sphinx",
    "Topic :: Software Development :: Documentation",
    "Topic :: Text Processing :: Markup",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.10"
dependencies = [
    "sphinx>=3.0",
    "docutils>=0.18",
    "numpy>=2.2.6",
    "pytest-cov>=6.1.1",
    # Excel-RAG統合に必要な依存関係
    "pandas>=2.0.0",
    "openpyxl>=3.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.5",
    "pytest-cov>=5.0.0",
    "pytest-benchmark>=5.1.0",
    "pytest-asyncio>=0.24.0",
    "coverage>=7.6.1",
    "mypy>=1.14.1",
    "ruff>=0.11.11",
    "pre-commit>=3.5.0",
    "build>=1.2.2.post1",
    "twine>=6.1.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.2.0",
]
docs = [
    "sphinx-rtd-theme>=3.0.2",
    "sphinx-autodoc-typehints>=2.0.1",
    "myst-parser>=0.18",
]
test = [
    "pytest>=8.3.5",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.10.0",
    "pytest-benchmark>=5.1.0",
]
all = ["sphinxcontrib-jsontable[dev,docs,test]"]

[project.urls]
Homepage = "https://github.com/sasakama-code/sphinxcontrib-jsontable"
Repository = "https://github.com/sasakama-code/sphinxcontrib-jsontable.git"
Issues = "https://github.com/sasakama-code/sphinxcontrib-jsontable/issues"
Changelog = "https://github.com/sasakama-code/sphinxcontrib-jsontable/blob/main/CHANGELOG.md"
Documentation = "https://github.com/sasakama-code/sphinxcontrib-jsontable#readme"

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
# Explicitly specify the packages to include
include = ["sphinxcontrib*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
"*" = ["requirements-test.txt", "test_requirements.txt", "py.typed"]

# ===== UV DEPENDENCY GROUPS (MODERN APPROACH) =====
# UV-compatible dependency groups for modern Python packaging
[dependency-groups]
# 開発ツール（linting, formatting, type checking）
dev = [
    # Core development tools
    "pytest>=8.3.5",
    "pytest-cov>=5.0.0",
    "pytest-benchmark>=5.1.0",
    "pytest-asyncio>=0.24.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.2.0",
    "coverage>=7.6.1",
    # Code quality tools
    "ruff>=0.11.11",
    "mypy>=1.14.1",
    "pre-commit>=3.5.0",
    # Build and packaging
    "build>=1.2.2.post1",
    "twine>=6.1.0",
    # Type stubs
    "types-docutils>=0.21.0.20250604",
]

# ドキュメント生成ツール
docs = [
    "sphinx-rtd-theme>=3.0.2",
    "sphinx-autodoc-typehints>=2.0.1",
    "myst-parser>=0.18",
]

# テスト専用依存関係
test = [
    "pytest>=8.3.5",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.10.0",
    "pytest-benchmark>=5.1.0",
    "pytest-asyncio>=0.24.0",
]

# セキュリティ監査ツール
security = [
    "safety>=3.0.0",
    "pip-audit>=2.6.0",
    "cyclonedx-bom>=4.0.0",
]

# Excel-RAG統合用依存関係グループ
excel = [
    "pandas>=2.0.0",
    "openpyxl>=3.1.0",
    "xlsxwriter>=3.0.0",  # Excel書き込み用
]

# ===== MYPY CONFIGURATION =====
# MyPy configuration - balanced for gradual typing
[tool.mypy]
python_version = "3.10"
warn_return_any = false
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true

# Balanced settings for existing codebase
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false

# Import handling
ignore_missing_imports = true
follow_imports = "silent"

# Error handling
show_error_codes = true
show_column_numbers = true

# Specific module overrides
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
ignore_errors = true

[[tool.mypy.overrides]]
module = "sphinxcontrib.*"
disallow_untyped_defs = false
warn_return_any = false
ignore_errors = false

# RAG modules - strict typing enforcement
[[tool.mypy.overrides]]
module = "sphinxcontrib.jsontable.rag.*"
disallow_untyped_defs = false
ignore_errors = false
warn_return_any = false

# ===== RUFF CONFIGURATION =====
# Ruff configuration for linting and formatting
[tool.ruff]
target-version = "py310"
line-length = 88
indent-width = 4

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# ===== PYTEST CONFIGURATION =====
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=sphinxcontrib.jsontable",
    "--cov-report=term",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--tb=short",                    # 短いトレースバック
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (use -m 'not slow' to deselect)",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests (CI-safe, time-independent)",
    "benchmark: marks tests as benchmark tests (use pytest-benchmark)",
    "property: marks tests related to property handling",
    "error_handling: marks tests related to error handling",
    "asyncio: marks tests as asyncio tests",
]
# Performance test environment handling
filterwarnings = [
    "ignore::pytest.PytestUnraisableExceptionWarning",
    "ignore::DeprecationWarning",
]

# pytest-asyncio configuration
[tool.pytest_asyncio]
asyncio_mode = "auto"

# ===== COVERAGE CONFIGURATION =====
[tool.coverage.run]
source = ["sphinxcontrib.jsontable"]
branch = true
parallel = true
omit = [
    "*/directives_backup.py",
    "*/test*",
    "*/__pycache__/*",
]

[tool.coverage.paths]
source = ["sphinxcontrib/jsontable", "*/site-packages/sphinxcontrib/jsontable"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
sort = "Cover"

exclude_lines = [
    # Standard exclusions
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",

    # Additional exclusions for development
    "pass",
    "\\.\\.\\.",
    "@abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"
title = "sphinxcontrib-jsontable Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"

# ===== PYTEST-BENCHMARK CONFIGURATION =====
[tool.pytest-benchmark]
# Only run benchmarks when explicitly requested
only_run_when_called = true
# Minimum rounds for stable results
min_rounds = 5
# Maximum time per benchmark
max_time = 30
# Disable timer overhead calibration in CI
disable_gc = true
# Sort results by mean time
sort = "mean"
# Store results for comparison
autosave = false
# Skip benchmarks by default (use --benchmark-only to run)
skip = true
