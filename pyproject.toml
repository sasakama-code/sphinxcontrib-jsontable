[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "sphinxcontrib-jsontable"
version = "0.1.0"
description = "Sphinx extension to render JSON data as tables"
readme = "README.md"
license = { text = "MIT" }
authors = [{ name = "sasakama-code", email = "sasakamacode@gmail.com" }]
maintainers = [{ name = "sasakama-code", email = "sasakamacode@gmail.com" }]
keywords = ["sphinx", "json", "table", "documentation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Environment :: Web Environment",
    "Framework :: Sphinx :: Extension",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Documentation",
    "Topic :: Documentation :: Sphinx",
    "Topic :: Software Development :: Documentation",
    "Topic :: Text Processing :: Markup",
]
requires-python = ">=3.9"
dependencies = [
    "sphinx>=3.0",
    "docutils>=0.18",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.5",
    "pytest-cov>=5.0.0",
    "coverage>=7.6.1",
    "mypy>=1.14.1",
    "ruff>=0.11.11",
    "pre-commit>=3.5.0",
    "build>=1.2.2.post1",
    "twine>=6.1.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.2.0",
]
docs = [
    "sphinx-rtd-theme>=3.0.2",
    "sphinx-autodoc-typehints>=2.0.1",
    "myst-parser>=0.18",
]
test = [
    "pytest>=8.3.5",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.10.0",
]

[project.urls]
Homepage = "https://github.com/sasakama-code/sphinxcontrib-jsontable"
Repository = "https://github.com/sasakama-code/sphinxcontrib-jsontable.git"
Issues = "https://github.com/sasakama-code/sphinxcontrib-jsontable/issues"
Changelog = "https://github.com/sasakama-code/sphinxcontrib-jsontable/blob/main/CHANGELOG.md"

[tool.setuptools.packages.find]
where = ["."]
include = ["sphinxcontrib.jsontable*"]

[tool.setuptools.package-data]
"sphinxcontrib.jsontable" = ["py.typed"]

# ===== RUFF CONFIGURATION =====
# Comprehensive ruff configuration optimized for CI pipeline and modern Python development
[tool.ruff]
# Python version compatibility
target-version = "py39"

# Line length (consistent with project standards)
line-length = 88

# Source directories to analyze
src = ["sphinxcontrib", "tests"]

# Rule selection - comprehensive but practical for existing codebase
select = [
    # Essential rules - pycodestyle and pyflakes
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes

    # Import sorting and organization
    "I",   # isort

    # Modern Python upgrades
    "UP",  # pyupgrade (Python syntax modernization)

    # Bug prevention
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions

    # Code simplification
    "PIE", # flake8-pie

    # Print statement detection (useful for production code)
    "T20", # flake8-print

    # Additional quality rules
    "RUF", # Ruff-specific rules
    "SIM", # flake8-simplify (subset of safe rules)
]

# Ignore rules that conflict with formatter or are too strict for existing code
ignore = [
    "E501",   # line too long, handled by ruff format
    "E203",   # whitespace before ':' (conflicts with formatter)
    "W503",   # line break before binary operator (deprecated)
    "B008",   # do not perform function calls in argument defaults
    "PIE800", # unnecessary-spread operator
    "T201",   # print statements allowed in development
    "T203",   # pprint statements allowed in development
    "SIM108", # use ternary operator - not always more readable
    "SIM117", # use dict.get - can be overly aggressive
]

# Per-file ignores for flexibility
[tool.ruff.per-file-ignores]
# Allow unused imports in __init__.py files (common pattern)
"__init__.py" = ["F401"]

# Test files can be more relaxed
"tests/**/*.py" = [
    "T201",   # Allow print statements in tests
    "T203",   # Allow pprint statements in tests
    "B011",   # Allow assert False in tests
    "SIM117", # Allow more verbose dict access in tests for clarity
]

# Configuration files can have imports at module level
"conf.py" = ["E402"]
"conftest.py" = ["E402"]

# Examples directory can be more relaxed
"examples/**/*.py" = ["T201", "T203", "B008"]

# Import sorting configuration
[tool.ruff.isort]
# Project-specific settings
known-first-party = ["sphinxcontrib.jsontable"]
split-on-trailing-comma = true
combine-as-imports = true
force-grid-wrap = 0
multi-line-output = 3
include-trailing-comma = true
line-length = 88

# Formatting configuration
[tool.ruff.format]
# Use double quotes for consistency with project style
quote-style = "double"

# Preserve trailing commas in multiline structures
skip-magic-trailing-comma = false

# Indentation
indent-style = "space"
tab-size = 4

# Line endings
line-ending = "auto"

# String normalization
docstring-code-format = true
docstring-code-line-length = "dynamic"

# Advanced rule configuration
[tool.ruff.flake8-bugbear]
# Allow default mutable arguments in dataclasses
extend-immutable-calls = ["dataclasses.field"]

[tool.ruff.flake8-quotes]
# Consistent with format.quote-style
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.pyupgrade]
# Keep typing compatibility for older Python versions
keep-runtime-typing = true

# ===== MYPY CONFIGURATION =====
# MyPy configuration - balanced for gradual typing
[tool.mypy]
python_version = "3.9"
warn_return_any = false
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true

# Balanced settings for existing codebase
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false

# Import handling
ignore_missing_imports = true
follow_imports = "silent"

# Error handling
show_error_codes = true
show_column_numbers = true

# Specific module overrides
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
ignore_errors = true

[[tool.mypy.overrides]]
module = "sphinxcontrib.*"
disallow_untyped_defs = false
warn_return_any = false

# ===== PYTEST CONFIGURATION =====
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=sphinxcontrib.jsontable",
    "--cov-report=term",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# ===== COVERAGE CONFIGURATION =====
[tool.coverage.run]
source = ["sphinxcontrib.jsontable"]
branch = true
parallel = true

[tool.coverage.paths]
source = [
    "sphinxcontrib/jsontable",
    "*/site-packages/sphinxcontrib/jsontable",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
sort = "Cover"

exclude_lines = [
    # Standard exclusions
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    
    # Additional exclusions for development
    "pass",
    "\\.\\.\\.",
    "@abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"
title = "sphinxcontrib-jsontable Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"