name: Security Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security analysis weekly on Mondays at 9:00 UTC
    - cron: '0 9 * * 1'

permissions:
  # Security: Minimal permissions for security analysis
  contents: read
  security-events: write
  actions: read

env:
  PYTHON_VERSION: '3.11'

jobs:
  # CodeQL Analysis
  codeql:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality
        config: |
          name: "Security Analysis Config"
          disable-default-queries: false
          queries:
            - uses: security-extended
            - uses: security-and-quality

    - name: Install dependencies for analysis
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
        upload: true

  # Advanced Security Audit
  security-audit:
    name: Advanced Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-security-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-security-

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit pip-audit semgrep

    - name: Run pip-audit (PyPA Official)
      run: |
        echo "Running pip-audit for dependency vulnerabilities..."
        pip-audit --format=json --output=pip-audit-report.json
        pip-audit --format=cyclonedx-json --output=pip-audit-sbom.json

    - name: Run Bandit (Python Security Linter)
      run: |
        echo "Running Bandit security analysis..."
        bandit -r sphinxcontrib/ -f json -o bandit-report.json
        bandit -r sphinxcontrib/ -f txt

    - name: Run Semgrep (SAST)
      run: |
        echo "Running Semgrep static analysis..."
        semgrep --config=auto --json --output=semgrep-report.json sphinxcontrib/
        semgrep --config=auto sphinxcontrib/

    - name: Enhanced Safety Check
      run: |
        echo "Running enhanced Safety check..."
        safety check --json --output=safety-detailed.json
        safety check --short-report

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          *-audit-report.json
          *-report.json
          pip-audit-sbom.json
        retention-days: 30

    - name: Security Summary
      if: always()
      run: |
        echo "## Security Analysis Summary" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ CodeQL analysis completed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Dependency audit (pip-audit) completed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Python security analysis (Bandit) completed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ SAST analysis (Semgrep) completed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Vulnerability scan (Safety) completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "All security reports have been uploaded as artifacts." >> $GITHUB_STEP_SUMMARY