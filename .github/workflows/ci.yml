name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  # Security: Explicit minimal permissions following principle of least privilege
  contents: read          # Repository access for checkout
  actions: read           # Cache action access
  checks: write           # Test result reporting
  pull-requests: write    # PR comment posting

env:
  # Use consistent Python version across jobs
  PYTHON_VERSION: '3.11'
  # Add cache versioning for better invalidation
  CACHE_VERSION: v1

jobs:
  # Code Quality Check
  quality:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Install dependencies with UV (dependency-groups)
      run: |
        # Modern UV dependency-groups approach with fallback
        echo "📦 Installing core dependencies..."
        uv sync --group dev --group test --group security
        echo "📦 Verifying critical tools..."
        uv add --dev ruff>=0.11.11 mypy>=1.14.1 types-docutils>=0.21.0.20250604
        echo "✅ All dependencies installed successfully"

    - name: Verify installation
      run: |
        uv run python -c "import sphinxcontrib.jsontable; print('Package installed successfully')"
        uv run python -c "from sphinxcontrib.jsontable import __version__; print(f'Version: {__version__}')"
        # インストールされたツールの確認
        echo "Checking development tools:"
        uv run ruff --version
        uv run mypy --version
        uv run pytest --version

    - name: Run ruff (linting)
      run: |
        echo "Running ruff linting..."
        uv run ruff check . --output-format=github

    - name: Run ruff (formatting)
      run: |
        echo "Running ruff formatting check..."
        uv run ruff format --check . --diff

    - name: Run mypy (type checking)
      run: |
        echo "Running mypy type checking..."
        uv run mypy sphinxcontrib/jsontable/ --config-file pyproject.toml

    - name: Enhanced security dependency audit
      run: |
        echo "Running enhanced dependency security audit..."
        # Use modern dependency-groups for security tools
        uv sync --group security
        echo "Running pip-audit (PyPA official tool)..."
        uv run pip-audit --format=json --output=pip-audit-report.json || true
        uv run pip-audit --desc || true
        echo "Running safety check..."
        uv run safety check --json --output=safety-report.json || true
        uv run safety check --short-report || true
        echo "Dependency audit completed successfully"

  # Build and Package Test
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Install build dependencies with UV
      run: |
        # Use development group for build tools with security
        echo "📦 Installing build dependencies..."
        uv sync --group dev --group security
        echo "📦 Installing build tools..."
        uv add --dev build>=1.2.2.post1 twine>=6.1.0
        echo "✅ Build dependencies installed"

    - name: Build package
      run: |
        echo "Building package..."
        uv build

    - name: Check package
      run: |
        echo "Checking package integrity..."
        uv run twine check dist/*

    - name: Test package installation
      run: |
        echo "Testing package installation..."
        uv pip install dist/*.whl
        uv run python -c "import sphinxcontrib.jsontable; print('Package installed successfully')"
        uv run python -c "from sphinxcontrib.jsontable import __version__; print(f'Version: {__version__}')"

    - name: Generate SBOM (Software Bill of Materials)
      run: |
        echo "Generating Software Bill of Materials..."
        uv sync --group security
        uv run cyclonedx-py environment --output-format json --outfile sbom.json
        uv run cyclonedx-py environment --output-format xml --outfile sbom.xml
        echo "SBOM generated successfully"

    - name: Upload SBOM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sbom-reports
        path: |
          sbom.json
          sbom.xml
        retention-days: 90

  # Test Suite
  test:
    needs: [quality, build]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12', '3.13']

    # CI環境変数を追加
    env:
      CI: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Install dependencies with UV
      run: |
        # Use test-specific dependency group with complete coverage
        echo "📦 Installing test dependencies..."
        uv sync --group test --group dev
        echo "📦 Ensuring coverage tools..."
        uv add --dev pytest>=8.3.5 pytest-cov>=5.0.0 coverage>=7.6.1
        echo "✅ Test dependencies installed"

    - name: Verify test installation
      run: |
        uv run python -c "import sphinxcontrib.jsontable; print('Package installed successfully')"
        uv run python -c "import pytest; print('Pytest installed successfully')"

    - name: Run tests
      run: |
        uv run pytest tests/ --cov=sphinxcontrib.jsontable --cov-report=xml --cov-report=term-missing --cov-fail-under=70 -v -m "not benchmark"

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage.xml
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}
        verbose: true

  # Performance and Benchmark Tests (Optional)
  performance:
    needs: [test]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    # パフォーマンステストはmainブランチとPR時のみ実行
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Install dependencies with UV
      run: |
        uv sync --group dev

    - name: Run benchmark tests
      run: |
        uv run pytest tests/ -m benchmark --benchmark-enable --benchmark-sort=mean --benchmark-json=benchmark.json -v --cov-fail-under=0
      continue-on-error: true  # ベンチマークは失敗してもCI全体は通す

    - name: Run performance tests (CI-safe)
      env:
        CI: true
      run: |
        uv run pytest tests/ -m performance -v --override-ini addopts=""

    - name: Upload benchmark results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark.json
        retention-days: 30
