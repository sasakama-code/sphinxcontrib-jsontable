name: Release to PyPI

on:
  release:
    types: [published]
  push:
    tags:
      - "v*"

env:
  PYTHON_VERSION: "3.11"

jobs:
  # ===============================
  # Build Distribution Packages
  # ===============================
  build:
    name: Build distribution 📦
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Debug environment and project structure
      run: |
        echo "🔍 Environment Debug Information"
        echo "Current working directory: $(pwd)"
        echo "Python version: $(python --version)"
        echo "Python executable: $(which python)"
        echo ""
        echo "📁 Project structure:"
        find . -type f -name "*.py" | head -20
        echo ""
        echo "📋 pyproject.toml exists: $(test -f pyproject.toml && echo 'Yes' || echo 'No')"
        echo "📋 setup.py exists: $(test -f setup.py && echo 'Yes' || echo 'No')"
        echo ""
        echo "🗂️ sphinxcontrib directory structure:"
        if [ -d "sphinxcontrib" ]; then
          find sphinxcontrib -type f -name "*.py" | sort
        else
          echo "❌ sphinxcontrib directory not found"
        fi

    - name: Install build dependencies
      run: |
        echo "📦 Installing build dependencies..."
        python -m pip install --upgrade pip
        python -m pip install build twine
        echo "✅ Build dependencies installed"

    - name: Install package dependencies
      run: |
        echo "📦 Installing Sphinx and package dependencies..."
        python -m pip install sphinx>=3.0 docutils>=0.18
        echo "✅ Package dependencies installed"
        echo "🔍 Checking installed packages:"
        pip list | grep -E "(sphinx|docutils)" || echo "No sphinx/docutils found"

    - name: Verify project structure before installation
      run: |
        echo "🔍 Pre-installation verification:"
        echo "Current directory: $(pwd)"
        echo "pyproject.toml content (first 50 lines):"
        head -50 pyproject.toml
        echo ""
        echo "📂 Directory listing:"
        ls -la
        echo ""
        echo "🐍 Python path:"
        python -c "import sys; [print(p) for p in sys.path]"

    - name: Install package in editable mode with verbose output
      run: |
        echo "🔧 Installing package in editable mode..."
        echo "Command: pip install -e ."
        python -m pip install -e . -v
        echo "✅ Package installation completed"

    - name: Verify package installation
      run: |
        echo "🔍 Post-installation verification:"
        echo "📦 Installed packages:"
        pip list | grep sphinxcontrib || echo "No sphinxcontrib packages found"
        echo ""
        echo "🐍 Python package discovery:"
        python -c "import sys, pkgutil; print('Python path:'); [print(f'  {path}') for path in sys.path]; print(); print('Checking for sphinxcontrib namespace:'); exec('try:\n    import sphinxcontrib\n    print(f\"✅ sphinxcontrib found at: {sphinxcontrib.__path__}\")\n    for finder, name, ispkg in pkgutil.iter_modules(sphinxcontrib.__path__, \"sphinxcontrib.\"):\n        print(f\"  📦 {name} (package: {ispkg})\")\nexcept ImportError as e:\n    print(f\"❌ sphinxcontrib import failed: {e}\")')"

    - name: Test package import
      run: |
        echo "🧪 Testing package import..."
        python -c "exec('try:\n    import sphinxcontrib.jsontable\n    print(\"✅ Package imported successfully\")\n    print(f\"📦 Version: {sphinxcontrib.jsontable.__version__}\")\n    print(f\"📂 Package location: {sphinxcontrib.jsontable.__file__}\")\nexcept ImportError as e:\n    print(f\"❌ Package import failed: {e}\")\n    import sys\n    print(f\"Python version: {sys.version}\")\n    print(f\"Python executable: {sys.executable}\")\n    print(\"Available modules in sphinxcontrib:\")\n    try:\n        import sphinxcontrib, pkgutil\n        for finder, name, ispkg in pkgutil.iter_modules(sphinxcontrib.__path__):\n            print(f\"  - {name}\")\n    except Exception as debug_e:\n        print(f\"Could not list sphinxcontrib modules: {debug_e}\")\n    raise')"

    - name: Verify Sphinx integration
      run: |
        echo "🔧 Testing Sphinx integration..."
        python -c "exec('try:\n    from sphinxcontrib.jsontable.directives import JsonTableDirective\n    print(\"✅ Directive import successful\")\n    from sphinxcontrib.jsontable import setup\n    print(\"✅ Setup function available\")\n    print(\"🎉 Sphinx integration verified\")\nexcept ImportError as e:\n    print(f\"❌ Sphinx integration failed: {e}\")\n    raise')"

    - name: Run basic functionality test
      run: |
        echo "🧪 Running functionality test..."
        python -c "exec('import tempfile, os\ntest_data = \"{\\\"name\\\": \\\"test\\\", \\\"value\\\": 123}\"\nwith tempfile.NamedTemporaryFile(mode=\"w\", suffix=\".json\", delete=False) as f:\n    f.write(test_data)\n    test_file = f.name\ntry:\n    from sphinxcontrib.jsontable.directives import JsonDataLoader, TableConverter, TableBuilder\n    loader = JsonDataLoader()\n    data = loader.parse_inline([test_data])\n    print(\"✅ JSON loading successful\")\n    converter = TableConverter()\n    table_data = converter.convert(data, include_header=True)\n    print(\"✅ Table conversion successful\")\n    builder = TableBuilder()\n    table_node = builder.build(table_data, has_header=True)\n    print(\"✅ Table building successful\")\n    print(\"🎉 All functionality tests passed!\")\nfinally:\n    os.unlink(test_file)')"

    - name: Build source distribution and wheel
      run: |
        echo "🔨 Building package distributions..."
        python -m build --verbose
        echo "✅ Build completed successfully"

    - name: Verify distributions
      run: |
        echo "🔍 Verifying built distributions..."
        python -m twine check dist/*
        echo "📋 Distribution files:"
        ls -la dist/
        echo "📊 Distribution details:"
        for file in dist/*; do
          echo "  📦 $file: $(wc -c < "$file") bytes"
        done

    - name: Test wheel installation in clean environment
      run: |
        echo "🧪 Testing wheel installation in clean environment..."
        python -m venv test_env
        echo "📦 Installing dependencies in test environment..."
        python -m pip install sphinx>=3.0 docutils>=0.18
        echo "📦 Installing our wheel..."
        python -m pip install dist/*.whl
        echo "🧪 Testing import in clean environment..."
        python -c "import sphinxcontrib.jsontable; print(f'✅ Wheel installation test passed: v{sphinxcontrib.jsontable.__version__}'); print(f'📂 Package location: {sphinxcontrib.jsontable.__file__}')"
        echo "🧹 Cleaning up test environment..."
        rm -rf test_env

    - name: Store distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
        retention-days: 30

  # ===============================
  # Publish to TestPyPI (Optional)
  # ===============================
  publish-to-testpypi:
    name: Publish to TestPyPI 🧪
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: [build]
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/sphinxcontrib-jsontable
    permissions:
      id-token: write # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download distribution packages
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Verify distributions before upload
      run: |
        echo "📋 Files to be uploaded to TestPyPI:"
        ls -la dist/
        echo "📊 Total files: $(ls -1 dist/ | wc -l)"

    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        verbose: true
        print-hash: true

    - name: Post-upload verification
      run: |
        echo "✅ Successfully uploaded to TestPyPI"
        echo "🔗 TestPyPI URL: https://test.pypi.org/project/sphinxcontrib-jsontable/"
        echo "📥 Test installation: pip install -i https://test.pypi.org/simple/ sphinxcontrib-jsontable"

  # ===============================
  # Publish to PyPI (Production)
  # ===============================
  publish-to-pypi:
    name: Publish to PyPI 🚀
    if: github.event_name == 'release' && github.event.action == 'published'
    needs: [build]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/sphinxcontrib-jsontable
    permissions:
      id-token: write # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download distribution packages
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Verify distributions before upload
      run: |
        echo "📋 Files to be uploaded to PyPI:"
        ls -la dist/
        echo "📊 Total files: $(ls -1 dist/ | wc -l)"
        pip install twine
        python -m twine check dist/*

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true
        print-hash: true

    - name: Post-upload verification and summary
      run: |
        echo "🎉 Successfully published to PyPI!"
        echo ""
        echo "📦 Package Information:"
        echo "  Name: sphinxcontrib-jsontable"
        echo "  Version: ${{ github.ref_name }}"
        echo "  PyPI URL: https://pypi.org/project/sphinxcontrib-jsontable/"
        echo ""
        echo "📥 Installation command:"
        echo "  pip install sphinxcontrib-jsontable"
        echo ""
        echo "📚 Documentation:"
        echo "  https://github.com/sasakama-code/sphinxcontrib-jsontable"

  # ===============================
  # Post-Release Tasks
  # ===============================
  notify-success:
    name: Notify successful release 📢
    if: github.event_name == 'release'
    needs: [publish-to-pypi]
    runs-on: ubuntu-latest
    
    steps:
    - name: Create comprehensive success notification
      run: |
        echo "🎊 RELEASE SUCCESSFUL! 🎊"
        echo ""
        echo "📦 Package: sphinxcontrib-jsontable"
        echo "🏷️  Version: ${{ github.ref_name }}"
        echo "🔗 PyPI: https://pypi.org/project/sphinxcontrib-jsontable/"
        echo "📚 GitHub: https://github.com/sasakama-code/sphinxcontrib-jsontable"
        echo ""
        echo "🚀 Ready for installation:"
        echo "   pip install sphinxcontrib-jsontable"
        echo ""
        echo "✨ Thank you for using sphinxcontrib-jsontable!"

  # ===============================
  # Handle failures
  # ===============================
  notify-failure:
    name: Handle release failure 🚨
    if: failure()
    needs: [build, publish-to-pypi]
    runs-on: ubuntu-latest
    
    steps:
    - name: Report failure details
      run: |
        echo "❌ RELEASE FAILED"
        echo ""
        echo "🔍 Please check the following:"
        echo "  1. Build logs for compilation errors"
        echo "  2. PyPI Trusted Publishing configuration"
        echo "  3. Package dependencies and metadata"
        echo "  4. GitHub environment permissions"
        echo ""
        echo "📞 For support, please check:"
        echo "  - GitHub Actions logs"
        echo "  - PyPI publishing status"
        echo "  - Repository issues"